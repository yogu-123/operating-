Q. Bankerâ€™s Algorithm :


#include<iostream>
#include<map>
using namespace std;
int main()
{
    int n,m;
    cout<<"Enter the no of processes:";
    cin>>n;
    cout<<"Enter the no of resources:";
    cin>>m;
    int a=10,b=5,c=7;
    
int allocated[5][3]= { {0,1,0},
                       {2,0,0},
                       {3,0,2},
                        {2,1,1},
                        {0,0,2} };
for(int j=0;j<5;j++)
{
    a=a-allocated[j][0];
}
for(int j=0;j<5;j++)
{
    b=b-allocated[j][1];
}
for(int j=0;j<5;j++)
{
    c=c-allocated[j][2];
}


int maxneed[5][3]={ {7,5,3},
                     {3,2,2},
                     {9,0,2},
                     {2,2,2},
                     {4,3,3} };
                     
int need[5][3];
for(int i=0;i<5;i++)
{
    for(int j=0;j<5;j++)
    {
        need[i][j]=maxneed[i][j]-allocated[i][j];
    }
}
 
map<int,bool>v;
cout<<"Available values of resources:" <<a<<" "<<b<<" "<<c<<endl;
for(int i=0;i<5;i++)
{
    if(need[i][0]<=a && need[i][1]<=b && need[i][2]<=c && !v[i])
    {
        v[i]=true;
        a+=allocated[i][0];
        b+=allocated[i][1];
        c+=allocated[i][2];
        cout<<i+1<<endl;
    }
}

for(int i=0;i<5;i++)
{
    if(need[i][0]<=a && need[i][1]<=b && need[i][2]<=c && !v[i])
    {
        v[i]=true;
        a+=allocated[i][0];
        b+=allocated[i][1];
        c+=allocated[i][2];
        cout<<i+1<<endl;
    }
}
                     

    
