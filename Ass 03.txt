Name: Yogita Vijay Lad
Roll no : 06
Div : C
PRN no : 12110261
Assignment No â€“ 3

                                                      CPU SCHEDULING

1)	FCFS :

Code :


#include<iostream>
using namespace std;


void findWaitingTime(int processes[], int n,
						int bt[], int wt[])
{
	
	wt[0] = 0;

	
	for (int i = 1; i < n ; i++ )
		wt[i] = bt[i-1] + wt[i-1] ;
}


void findTurnAroundTime( int processes[], int n,
				int bt[], int wt[], int tat[])
{
	
	for (int i = 0; i < n ; i++)
		tat[i] = bt[i] + wt[i];
}


void findavgTime( int processes[], int n, int bt[])
{
	int wt[n], tat[n], total_wt = 0, total_tat = 0;


	findWaitingTime(processes, n, bt, wt);

	
	findTurnAroundTime(processes, n, bt, wt, tat);


	cout << "Processes "<< " Burst time "
		<< " Waiting time " << " Turn around time\n";

	
	for (int i=0; i<n; i++)
	{
		total_wt = total_wt + wt[i];
		total_tat = total_tat + tat[i];
		cout << " " << i+1 << "\t\t" << bt[i] <<"\t "
			<< wt[i] <<"\t\t " << tat[i] <<endl;
	}

	cout << "Average waiting time = "
		<< (float)total_wt / (float)n;
	cout << "\nAverage turn around time = "
		<< (float)total_tat / (float)n;
}

// Driver code
int main()
{   
	int processes[]={1,2,3,4,5};
	int n;
	std::cin >> n;
	int burst_time[n] ;
	for(int i=0;i<n;i++){
	    std::cin >> burst_time[i];
	}

	findavgTime(processes, n, burst_time);
	return 0;
}










Output : 

 


2)	SJF :

Code :

#include <stdio.h>
int main()
{
	int A[100][4]; 
				
	int i, j, n, total = 0, index, temp;
	float avg_wt, avg_tat;
	printf("Enter number of process: ");
	scanf("%d", &n);
	printf("Enter Burst Time:\n");
	
	for (i = 0; i < n; i++) {
		printf("P%d: ", i + 1);
		scanf("%d", &A[i][1]);
		A[i][0] = i + 1;
	}
	
	for (i = 0; i < n; i++) {
		index = i;
		for (j = i + 1; j < n; j++)
			if (A[j][1] < A[index][1])
				index = j;
		temp = A[i][1];
		A[i][1] = A[index][1];
		A[index][1] = temp;

		temp = A[i][0];
		A[i][0] = A[index][0];
		A[index][0] = temp;
	}
	A[0][2] = 0;
	
	for (i = 1; i < n; i++) {
		A[i][2] = 0;
		for (j = 0; j < i; j++)
			A[i][2] += A[j][1];
		total += A[i][2];
	}
	avg_wt = (float)total / n;
	total = 0;
	printf("P	 BT	 WT	 TAT\n");
	
	for (i = 0; i < n; i++) {
		A[i][3] = A[i][1] + A[i][2];
		total += A[i][3];
		printf("P%d	 %d	 %d	 %d\n", A[i][0],
			A[i][1], A[i][2], A[i][3]);
	}
	avg_tat = (float)total / n;
	printf("Average Waiting Time= %f", avg_wt);
	printf("\nAverage Turnaround Time= %f", avg_tat);
}


Output :


 


3.)  SJF (primitive) :

Code :



#include <bits/stdc++.h>
using namespace std;

struct Process {
	int pid; 
	int bt; 
	int art; 
};


void findWaitingTime(Process proc[], int n,
								int wt[])
{
	int rt[n];

	
	for (int i = 0; i < n; i++)
		rt[i] = proc[i].bt;

	int complete = 0, t = 0, minm = INT_MAX;
	int shortest = 0, finish_time;
	bool check = false;

	
	while (complete != n) {

	
		for (int j = 0; j < n; j++) {
			if ((proc[j].art <= t) &&
			(rt[j] < minm) && rt[j] > 0) {
				minm = rt[j];
				shortest = j;
				check = true;
			}
		}

		if (check == false) {
			t++;
			continue;
		}

	
		rt[shortest]--;

		
		minm = rt[shortest];
		if (minm == 0)
			minm = INT_MAX;

		
		if (rt[shortest] == 0) {

			
			complete++;
			check = false;

			
			finish_time = t + 1;

			
			wt[shortest] = finish_time -
						proc[shortest].bt -
						proc[shortest].art;

			if (wt[shortest] < 0)
				wt[shortest] = 0;
		}
		
		t++;
	}
}


void findTurnAroundTime(Process proc[], int n,
						int wt[], int tat[])
{
	
	for (int i = 0; i < n; i++)
		tat[i] = proc[i].bt + wt[i];
}


void findavgTime(Process proc[], int n)
{
	int wt[n], tat[n], total_wt = 0,
					total_tat = 0;

	
	findWaitingTime(proc, n, wt);

	
	findTurnAroundTime(proc, n, wt, tat);


	cout << " P\t\t"
		<< "BT\t\t"
		<< "WT\t\t"
		<< "TAT\t\t\n";

	
	for (int i = 0; i < n; i++) {
		total_wt = total_wt + wt[i];
		total_tat = total_tat + tat[i];
		cout << " " << proc[i].pid << "\t\t"
			<< proc[i].bt << "\t\t " << wt[i]
			<< "\t\t " << tat[i] << endl;
	}

	cout << "\nAverage waiting time = "
		<< (float)total_wt / (float)n;
	cout << "\nAverage turn around time = "
		<< (float)total_tat / (float)n;
}


int main()
{
	Process proc[] = { { 1, 6, 2 }, { 2, 2, 5 },
					{ 3, 8, 1 }, { 4, 3, 0}, {5, 4, 4} };
	int n = sizeof(proc) / sizeof(proc[0]);

	findavgTime(proc, n);
	return 0;
}

Output :

 

4.) Round Robin :

Code :


#include<iostream>
using namespace std;


void findWaitingTime(int processes[], int n,
			int bt[], int wt[], int quantum)
{
	
	int rem_bt[n];
	for (int i = 0 ; i < n ; i++)
		rem_bt[i] = bt[i];

	int t = 0; 

	
	while (1)
	{
		bool done = true;

		
		for (int i = 0 ; i < n; i++)
		{
			
			if (rem_bt[i] > 0)
			{
				done = false; 

				if (rem_bt[i] > quantum)
				{
					
					t += quantum;

					
					rem_bt[i] -= quantum;
				}

				
				else
				{
					
					t = t + rem_bt[i];

					
					wt[i] = t - bt[i];

					
					rem_bt[i] = 0;
				}
			}
		}

		
		if (done == true)
		break;
	}
}


void findTurnAroundTime(int processes[], int n,
						int bt[], int wt[], int tat[])
{

	for (int i = 0; i < n ; i++)
		tat[i] = bt[i] + wt[i];
}


void findavgTime(int processes[], int n, int bt[],
									int quantum)
{
	int wt[n], tat[n], total_wt = 0, total_tat = 0;

	
	findWaitingTime(processes, n, bt, wt, quantum);

	
	findTurnAroundTime(processes, n, bt, wt, tat);

	
	cout << "PN\t "<< " \tBT "
		<< " WT " << " \tTAT\n";

	
	for (int i=0; i<n; i++)
	{
		total_wt = total_wt + wt[i];
		total_tat = total_tat + tat[i];
		cout << " " << i+1 << "\t\t" << bt[i] <<"\t "
			<< wt[i] <<"\t\t " << tat[i] <<endl;
	}

	cout << "Average waiting time = "
		<< (float)total_wt / (float)n;
	cout << "\nAverage turn around time = "
		<< (float)total_tat / (float)n;
}


int main()
{
	
	int processes[] = { 1, 2, 3};
	int n = sizeof processes / sizeof processes[0];

	
	int burst_time[] = {10, 5, 8};

	
	int quantum = 2;
	findavgTime(processes, n, burst_time, quantum);
	return 0;
}

Output :

 


5.) Priority based :

Code :

// C++ program for implementation of FCFS
// scheduling
#include<bits/stdc++.h>
using namespace std;

struct Process
{
	int pid; // Process ID
	int bt; // CPU Burst time required
	int priority; // Priority of this process
};

// Function to sort the Process acc. to priority
bool comparison(Process a, Process b)
{
	return (a.priority > b.priority);
}

// Function to find the waiting time for all
// processes
void findWaitingTime(Process proc[], int n,
					int wt[])
{
	// waiting time for first process is 0
	wt[0] = 0;

	// calculating waiting time
	for (int i = 1; i < n ; i++ )
		wt[i] = proc[i-1].bt + wt[i-1] ;
}

// Function to calculate turn around time
void findTurnAroundTime( Process proc[], int n,
						int wt[], int tat[])
{
	// calculating turnaround time by adding
	// bt[i] + wt[i]
	for (int i = 0; i < n ; i++)
		tat[i] = proc[i].bt + wt[i];
}

//Function to calculate average time
void findavgTime(Process proc[], int n)
{
	int wt[n], tat[n], total_wt = 0, total_tat = 0;

	//Function to find waiting time of all processes
	findWaitingTime(proc, n, wt);

	//Function to find turn around time for all processes
	findTurnAroundTime(proc, n, wt, tat);

	//Display processes along with all details
	cout << "\nProcesses "<< " Burst time "
		<< " Waiting time " << " Turn around time\n";

	// Calculate total waiting time and total turn
	// around time
	for (int i=0; i<n; i++)
	{
		total_wt = total_wt + wt[i];
		total_tat = total_tat + tat[i];
		cout << " " << proc[i].pid << "\t\t"
			<< proc[i].bt << "\t " << wt[i]
			<< "\t\t " << tat[i] <<endl;
	}

	cout << "\nAverage waiting time = "
		<< (float)total_wt / (float)n;
	cout << "\nAverage turn around time = "
		<< (float)total_tat / (float)n;
}

void priorityScheduling(Process proc[], int n)
{
	// Sort processes by priority
	sort(proc, proc + n, comparison);

	cout<< "Order in which processes gets executed \n";
	for (int i = 0 ; i < n; i++)
		cout << proc[i].pid <<" " ;

	findavgTime(proc, n);
}

// Driver code
int main()
{
	Process proc[] = {{1, 10, 2}, {2, 5, 0}, {3, 8, 1}};
	int n = sizeof proc / sizeof proc[0];
	priorityScheduling(proc, n);
	return 0;
}


Output :

